

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}
 
 
terminal PROG, BREAK, LBRACE, RBRACE, CONST, RBRACKET, LBRACKET, LPAREN, RPAREN, ASSIGN, RETURN, COMMA, PRINT, VOID, IF, ELSE, SEMI, READ, COLON;
terminal DEFAULT, YIELD, PLUS, MINUS, INC, DEC, MUL, DIV, MOD, LT, GT, LE, GE, DIF, EQUAL, NEW, SWITCH, CASE, QUESTION, OR, AND, CLASS, ENUM, DO, WHILE, EXTENDS, CONTINUE;
terminal Integer NUMCONST;
terminal Character CHARCONST;
terminal String BOOLCONST;
terminal String IDENT;

nonterminal Break, Continue, MethodDeclList, NonMethodDeclList, NonMethodDecl, ConstDecl, VarDecl, ConstIdents, ConstIdent, IsArray, VarIdents, VarIdent, Addop, MethodVarDecls, DummyLparen, DummyRparen;
nonterminal NewDummy, FormPars, FormPar, Statement, FormParsList, DesignatorStatement, IfOrElseStatement, Condition, ReturnStatement, ToPrint, StatementList, DoDummy, SwitchDummy;
nonterminal OperationsWithDesignator, Assignop, ActParsList, ActPars, CondTerm, CondFact, Relop, IsMinus, ExprList, Mulop, SwitchBodyWithoutDefault, StatementListWithYield, DummyColon;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodNameAndReturnType, MethodDecl, DesignatorArray;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr, SwitchBody;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p NonMethodDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

NonMethodDeclList ::= (NonMethodDeclList_) NonMethodDeclList NonMethodDecl
					| (NoNonMethodDeclList_) /* epsilon */
					;
NonMethodDecl ::= (ConstDecl1) ConstDecl
					| (VarDecl1) VarDecl
					;

ConstDecl ::= (ConstDecl) CONST Type ConstIdents SEMI;

ConstIdents ::= (ConstIdents_) ConstIdents COMMA ConstIdent
			| (ConstIdent1) ConstIdent
			;
			
ConstIdent ::= (NumConst1) IDENT:vName ASSIGN NUMCONST:vValue
				| (CharConst1) IDENT:vName ASSIGN CHARCONST:vValue
				| (BoolConst1) IDENT:vName ASSIGN BOOLCONST:vValue
				;

VarDecl ::= (VarDecl) Type VarIdents SEMI;

VarIdents ::= (VarIdents_) VarIdents COMMA VarIdent
			| (VarIdent1) VarIdent
			;
			
VarIdent ::= (VarIdent) IDENT IsArray;

IsArray ::= (IsArray_) LBRACKET RBRACKET
			| (NoArray_) /* epsilon */
			;

Type ::= (Type) IDENT:vType;

MethodDeclList ::= (MethodDeclList_) MethodDeclList MethodDecl
				| (NoMethods_) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) MethodNameAndReturnType LPAREN FormParsList RPAREN MethodVarDecls LBRACE StatementList RBRACE;

MethodVarDecls ::= (MethodVarDecls_) MethodVarDecls VarDecl
				| (NoMethodVarDecls_) /* epsilon */
				;

MethodNameAndReturnType ::= (TypeReturn) Type:mType IDENT:mName
						| (Void1) VOID IDENT:mName
						;

FormParsList ::= (FormParsList_)  FormPars  
			| (NoFormParamsList) /* epsilon */
			;
		
FormPars ::= (FormPars_) FormPar COMMA FormPars
			| (FormPar1) FormPar
			;

FormPar ::= (FormPar) Type IDENT IsArray;

Statement ::= (DesignatorStatement1) DesignatorStatement SEMI
			| (IfOrElseStatement1) IfOrElseStatement
			| (DoWhileStatement_) DoDummy Statement WHILE LPAREN Condition RPAREN SEMI
			| (YieldStatement_) YIELD Expr SEMI
			| (BreakStatement_) Break SEMI
			| (ContinueStatement_) Continue SEMI
			| (ReturnStatement1) ReturnStatement SEMI
			| (ReadStatement_) READ LPAREN Designator RPAREN SEMI
			| (PrintStatement_) PRINT LPAREN ToPrint RPAREN SEMI
			| (StatementList1) LBRACE StatementList RBRACE 
			; 

DoDummy ::= (DoDummy) DO;

Break ::= (Break1) BREAK;

Continue ::= (Continue1) CONTINUE;

IfOrElseStatement ::= (IfStatement_) IF LPAREN Condition RPAREN Statement
					| (ElseStatement_) IF LPAREN Condition RPAREN Statement ELSE Statement
					;

ReturnStatement ::= (ReturnVoidStatement_) RETURN
					| (ReturnExprStatement_) RETURN Expr
					;

ToPrint ::= (NoNumConstPrint_) Expr 
			| (NumConstPrint_) Expr COMMA NUMCONST
			;

StatementList ::= (StatementList_) StatementList Statement 
				| (NoStatementList_) /* epsilon */
				;

DesignatorStatement ::= (DesignatorStatement) Designator OperationsWithDesignator;

OperationsWithDesignator ::= (AssignExpression_) Assignop Expr
							| (ActParsListExpression_) DummyLparen ActParsList DummyRparen 
							| (IncExpression_) INC
							| (DecExpression_) DEC
							; 
							
DummyLparen ::= (DummyLparen) LPAREN;
DummyRparen ::= (DummyRparen) RPAREN;							

ActParsList ::= (ActParsList_) ActPars
			| (NoActParsList_) /* epsilon */
			;

ActPars ::= (ActPars_)  Expr COMMA ActPars
			| (ActPar_) Expr
			;
			
Condition ::= (Conditions_) Condition OR CondTerm
			| (CondTerm1) CondTerm
			;

CondTerm ::= (CondTerm_) CondTerm AND CondFact
			| (CondFact1) CondFact
			;

CondFact ::= (CondFactExpr_) Expr
			| (CondFactExprs_) Expr Relop Expr
			;
			
Expr ::= (MinusExpr_) MINUS Term
			| (PlusExpr_) Term
			| (ExprList1) Expr Addop Term
			| (SwitchStatement_) SwitchDummy LPAREN Expr RPAREN LBRACE SwitchBody RBRACE
			;

SwitchDummy ::= (SwitchDummy) SWITCH;

Term ::= (Term_) Term Mulop Factor
			| (Factor1) Factor
			;
			
Factor ::=  (Designator1) Designator:dName
			| (Designator2) Designator:dName DummyLparen ActParsList DummyRparen
			| (NumConst2) NUMCONST:cValue
			| (CharConst2) CHARCONST:cValue
			| (BoolConst2) BOOLCONST:cValue
			| (New2) NEW Type LBRACKET Expr RBRACKET
			| (NestedExpr1) LPAREN Expr RPAREN
			;

NewDummy ::= (NewDummy) NEW;

Designator ::= (DesignatorNotArray_) IDENT
			| (DesignatorArray1) DesignatorArray LBRACKET Expr RBRACKET
			;
			
DesignatorArray ::= (DesignatorArray) IDENT;
			
SwitchBody ::= (SwitchBody) SwitchBodyWithoutDefault DEFAULT DummyColon StatementList;

DummyColon ::= (DummyColon) COLON;

SwitchBodyWithoutDefault ::= (SwitchBodyWithoutDefault_) SwitchBodyWithoutDefault CASE NUMCONST COLON StatementList
							| (NoSwitchBodyWithoutDefault_) /* epsilon */
							;

Assignop ::= (Assignop) ASSIGN;


Relop ::= (Eqop1) EQUAL 
		| (Difop1) DIF
		| (Ltop1) LT
		| (Leop1) LE
		| (Gtop1) GT
		| (Geop1) GE
		;

Addop ::= (Plusop1) PLUS
		| (Minusop1) MINUS
		;

Mulop ::= (Mulop1) MUL
		| (Divop1) DIV
		| (Modop1) MOD
		;



 			