

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}
 
 
terminal PROG, BREAK, LBRACE, RBRACE, CONST, RBRACKET, LBRACKET, LPAREN, RPAREN, ASSIGN, RETURN, COMMA, PRINT, VOID, IF, ELSE, SEMI, READ, COLON;
terminal DEFAULT, YIELD, PLUS, MINUS, INC, DEC, MUL, DIV, MOD, LT, GT, LE, GE, DIF, EQUAL, NEW, SWITCH, CASE, QUESTION, OR, AND, CLASS, ENUM, DO, WHILE, EXTENDS, CONTINUE;
terminal Integer NUMCONST;
terminal Character CHARCONST;
terminal String BOOLCONST;
terminal String IDENT;

nonterminal Break Break;
nonterminal Continue Continue;
nonterminal MethodDeclList MethodDeclList;
nonterminal NonMethodDeclList NonMethodDeclList;
nonterminal NonMethodDecl NonMethodDecl;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ConstIdents ConstIdents;
nonterminal ConstIdent ConstIdent;
nonterminal IsArray IsArray;
nonterminal VarIdents VarIdents;
nonterminal VarIdent VarIdent;
nonterminal Addop Addop;
nonterminal MethodVarDecls MethodVarDecls;
nonterminal FormPars FormPars;
nonterminal FormPar FormPar;
nonterminal Statement Statement;
nonterminal FormParsList FormParsList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignatorArray DesignatorArray;
nonterminal IfOrElseStatement IfOrElseStatement;
nonterminal Condition Condition;
nonterminal ReturnStatement ReturnStatement;
nonterminal ToPrint ToPrint;
nonterminal StatementList StatementList;
nonterminal DoDummy DoDummy;
nonterminal SwitchDummy SwitchDummy;
nonterminal OperationsWithDesignator OperationsWithDesignator;
nonterminal Assignop Assignop;
nonterminal ActParsList ActParsList;
nonterminal ActPars ActPars;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal Relop Relop;
nonterminal IsMinus IsMinus;
nonterminal ExprList ExprList;
nonterminal Mulop Mulop;
nonterminal SwitchBodyWithoutDefault SwitchBodyWithoutDefault;
nonterminal StatementListWithYield StatementListWithYield;
nonterminal DummyColon DummyColon;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodNameAndReturnType, MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr, SwitchBody;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p NonMethodDeclList:N1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, N1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

NonMethodDeclList ::= (NonMethodDeclList_) NonMethodDeclList:N1 NonMethodDecl:N2 {: RESULT=new NonMethodDeclList_(N1, N2); RESULT.setLine(N1left); :}
					| (NoNonMethodDeclList_) {: RESULT=new NoNonMethodDeclList_(); :} /* epsilon */
					;
NonMethodDecl ::= (ConstDecl1) ConstDecl:C1 {: RESULT=new ConstDecl1(C1); RESULT.setLine(C1left); :}
					| (VarDecl1) VarDecl:V1 {: RESULT=new VarDecl1(V1); RESULT.setLine(V1left); :}
					;

ConstDecl ::= (ConstDecl) CONST Type:T1 ConstIdents:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};

ConstIdents ::= (ConstIdents_) ConstIdents:C1 COMMA ConstIdent:C2 {: RESULT=new ConstIdents_(C1, C2); RESULT.setLine(C1left); :}
			| (ConstIdent1) ConstIdent:C1 {: RESULT=new ConstIdent1(C1); RESULT.setLine(C1left); :}
			;
			
ConstIdent ::= (NumConst1) IDENT:vName ASSIGN NUMCONST:vValue {: RESULT=new NumConst1(vName, vValue); RESULT.setLine(vNameleft); :}
				| (CharConst1) IDENT:vName ASSIGN CHARCONST:vValue {: RESULT=new CharConst1(vName, vValue); RESULT.setLine(vNameleft); :}
				| (BoolConst1) IDENT:vName ASSIGN BOOLCONST:vValue {: RESULT=new BoolConst1(vName, vValue); RESULT.setLine(vNameleft); :}
				;

VarDecl ::= (VarDecl) Type:T1 VarIdents:V2 SEMI {: RESULT=new VarDecl(T1, V2); RESULT.setLine(T1left); :};

VarIdents ::= (VarIdents_) VarIdents:V1 COMMA VarIdent:V2 {: RESULT=new VarIdents_(V1, V2); RESULT.setLine(V1left); :}
			| (VarIdent1) VarIdent:V1 {: RESULT=new VarIdent1(V1); RESULT.setLine(V1left); :}
			;
			
VarIdent ::= (VarIdent) IDENT:I1 IsArray:I2 {: RESULT=new VarIdent(I1, I2); RESULT.setLine(I1left); :};

IsArray ::= (IsArray_) LBRACKET RBRACKET {: RESULT=new IsArray_(); :}
			| (NoArray_) {: RESULT=new NoArray_(); :} /* epsilon */
			;

Type ::= (Type) IDENT:vType {: RESULT=new Type(vType); RESULT.setLine(vTypeleft); :};

MethodDeclList ::= (MethodDeclList_) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclList_(M1, M2); RESULT.setLine(M1left); :}
				| (NoMethods_) {: RESULT=new NoMethods_(); :} /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) MethodNameAndReturnType:M1 LPAREN FormParsList:F2 RPAREN MethodVarDecls:M3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, M3, S4); RESULT.setLine(M1left); :};

MethodVarDecls ::= (MethodVarDecls_) MethodVarDecls:M1 VarDecl:V2 {: RESULT=new MethodVarDecls_(M1, V2); RESULT.setLine(M1left); :}
				| (NoMethodVarDecls_) {: RESULT=new NoMethodVarDecls_(); :} /* epsilon */
				;

MethodNameAndReturnType ::= (TypeReturn) Type:mType IDENT:mName {: RESULT=new TypeReturn(mType, mName); RESULT.setLine(mTypeleft); :}
						| (Void1) VOID IDENT:mName {: RESULT=new Void1(mName); RESULT.setLine(mNameleft); :}
						;

FormParsList ::= (FormParsList_)  FormPars:F1 {: RESULT=new FormParsList_(F1); RESULT.setLine(F1left); :}  
			| (NoFormParamsList) {: RESULT=new NoFormParamsList(); :} /* epsilon */
			;
		
FormPars ::= (FormPars_) FormPar:F1 COMMA FormPars:F2 {: RESULT=new FormPars_(F1, F2); RESULT.setLine(F1left); :}
			| (FormPar1) FormPar:F1 {: RESULT=new FormPar1(F1); RESULT.setLine(F1left); :}
			;

FormPar ::= (FormPar) Type:T1 IDENT:I2 IsArray:I3 {: RESULT=new FormPar(T1, I2, I3); RESULT.setLine(T1left); :};

Statement ::= (DesignatorStatement1) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStatement1(D1); RESULT.setLine(D1left); :}
			| (IfOrElseStatement1) IfOrElseStatement:I1 {: RESULT=new IfOrElseStatement1(I1); RESULT.setLine(I1left); :}
			| (DoWhileStatement_) DoDummy:D1 Statement:S2 WHILE LPAREN Condition:C3 RPAREN SEMI {: RESULT=new DoWhileStatement_(D1, S2, C3); RESULT.setLine(D1left); :}
			| (YieldStatement_) YIELD Expr:E1 SEMI {: RESULT=new YieldStatement_(E1); RESULT.setLine(E1left); :}
			| (BreakStatement_) Break:B1 SEMI {: RESULT=new BreakStatement_(B1); RESULT.setLine(B1left); :}
			| (ContinueStatement_) Continue:C1 SEMI {: RESULT=new ContinueStatement_(C1); RESULT.setLine(C1left); :}
			| (ReturnStatement1) ReturnStatement:R1 SEMI {: RESULT=new ReturnStatement1(R1); RESULT.setLine(R1left); :}
			| (ReadStatement_) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement_(D1); RESULT.setLine(D1left); :}
			| (PrintStatement_) PRINT LPAREN ToPrint:T1 RPAREN SEMI {: RESULT=new PrintStatement_(T1); RESULT.setLine(T1left); :}
			| (StatementList1) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementList1(S1); RESULT.setLine(S1left); :} 
			; 

DoDummy ::= (DoDummy) DO {: RESULT=new DoDummy(); :};

Break ::= (Break1) BREAK {: RESULT=new Break1(); :};

Continue ::= (Continue1) CONTINUE {: RESULT=new Continue1(); :};

IfOrElseStatement ::= (IfStatement_) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new IfStatement_(C1, S2); RESULT.setLine(C1left); :}
					| (ElseStatement_) IF LPAREN Condition:C1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new ElseStatement_(C1, S2, S3); RESULT.setLine(C1left); :}
					;

ReturnStatement ::= (ReturnVoidStatement_) RETURN {: RESULT=new ReturnVoidStatement_(); :}
					| (ReturnExprStatement_) RETURN Expr:E1 {: RESULT=new ReturnExprStatement_(E1); RESULT.setLine(E1left); :}
					;

ToPrint ::= (NoNumConstPrint_) Expr:E1 {: RESULT=new NoNumConstPrint_(E1); RESULT.setLine(E1left); :} 
			| (NumConstPrint_) Expr:E1 COMMA NUMCONST:N2 {: RESULT=new NumConstPrint_(E1, N2); RESULT.setLine(E1left); :}
			;

StatementList ::= (StatementList_) StatementList:S1 Statement:S2 {: RESULT=new StatementList_(S1, S2); RESULT.setLine(S1left); :} 
				| (NoStatementList_) {: RESULT=new NoStatementList_(); :} /* epsilon */
				;

DesignatorStatement ::= (DesignatorStatement) Designator:D1 OperationsWithDesignator:O2 {: RESULT=new DesignatorStatement(D1, O2); RESULT.setLine(D1left); :};

OperationsWithDesignator ::= (AssignExpression_) Assignop:A1 Expr:E2 {: RESULT=new AssignExpression_(A1, E2); RESULT.setLine(A1left); :}
							| (ActParsListExpression_) LPAREN ActParsList:A1 RPAREN {: RESULT=new ActParsListExpression_(A1); RESULT.setLine(A1left); :} 
							| (IncExpression_) INC {: RESULT=new IncExpression_(); :}
							| (DecExpression_) DEC {: RESULT=new DecExpression_(); :}
							; 

ActParsList ::= (ActParsList_) ActPars:A1 {: RESULT=new ActParsList_(A1); RESULT.setLine(A1left); :}
			| (NoActParsList_) {: RESULT=new NoActParsList_(); :} /* epsilon */
			;

ActPars ::= (ActPars_)  Expr:E1 COMMA ActPars:A2 {: RESULT=new ActPars_(E1, A2); RESULT.setLine(E1left); :}
			| (ActPar_) Expr:E1 {: RESULT=new ActPar_(E1); RESULT.setLine(E1left); :}
			;
			
Condition ::= (Conditions_) Condition:C1 OR CondTerm:C2 {: RESULT=new Conditions_(C1, C2); RESULT.setLine(C1left); :}
			| (CondTerm1) CondTerm:C1 {: RESULT=new CondTerm1(C1); RESULT.setLine(C1left); :}
			;

CondTerm ::= (CondTerm_) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTerm_(C1, C2); RESULT.setLine(C1left); :}
			| (CondFact1) CondFact:C1 {: RESULT=new CondFact1(C1); RESULT.setLine(C1left); :}
			;

CondFact ::= (CondFactExpr_) Expr:E1 {: RESULT=new CondFactExpr_(E1); RESULT.setLine(E1left); :}
			| (CondFactExprs_) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactExprs_(E1, R2, E3); RESULT.setLine(E1left); :}
			;
			
Expr ::= (MinusExpr_) MINUS Term:T1 {: RESULT=new MinusExpr_(T1); RESULT.setLine(T1left); :}
			| (PlusExpr_) Term:T1 {: RESULT=new PlusExpr_(T1); RESULT.setLine(T1left); :}
			| (ExprList1) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprList1(E1, A2, T3); RESULT.setLine(E1left); :}
			| (SwitchStatement_) SwitchDummy:S1 LPAREN Expr:E2 RPAREN LBRACE SwitchBody:S3 RBRACE {: RESULT=new SwitchStatement_(S1, E2, S3); RESULT.setLine(S1left); :}
			;

SwitchDummy ::= (SwitchDummy) SWITCH {: RESULT=new SwitchDummy(); :};

Term ::= (Term_) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new Term_(T1, M2, F3); RESULT.setLine(T1left); :}
			| (Factor1) Factor:F1 {: RESULT=new Factor1(F1); RESULT.setLine(F1left); :}
			;
			
Factor ::=  (Designator1) Designator:dName {: RESULT=new Designator1(dName); RESULT.setLine(dNameleft); :}
			| (Designator2) Designator:dName LPAREN ActParsList:A1 RPAREN {: RESULT=new Designator2(dName, A1); RESULT.setLine(dNameleft); :}
			| (NumConst2) NUMCONST:cValue {: RESULT=new NumConst2(cValue); RESULT.setLine(cValueleft); :}
			| (CharConst2) CHARCONST:cValue {: RESULT=new CharConst2(cValue); RESULT.setLine(cValueleft); :}
			| (BoolConst2) BOOLCONST:cValue {: RESULT=new BoolConst2(cValue); RESULT.setLine(cValueleft); :}
			| (New1) NEW Type:T1 {: RESULT=new New1(T1); RESULT.setLine(T1left); :}
			| (New2) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new New2(T1, E2); RESULT.setLine(T1left); :}
			| (NestedExpr1) LPAREN Expr:E1 RPAREN {: RESULT=new NestedExpr1(E1); RESULT.setLine(E1left); :}
			;

Designator ::= (DesignatorNotArray_) IDENT:I1 {: RESULT=new DesignatorNotArray_(I1); RESULT.setLine(I1left); :}
			| (DesignatorArray1) DesignatorArray:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorArray1(D1, E2); RESULT.setLine(D1left); :}
			;
			
DesignatorArray ::= (DesignatorArray) IDENT:I1 {: RESULT=new DesignatorArray(I1); RESULT.setLine(I1left); :};
			
SwitchBody ::= (SwitchBody) SwitchBodyWithoutDefault:S1 DEFAULT DummyColon:D2 StatementList:S3 {: RESULT=new SwitchBody(S1, D2, S3); RESULT.setLine(S1left); :};

DummyColon ::= (DummyColon) COLON {: RESULT=new DummyColon(); :};

SwitchBodyWithoutDefault ::= (SwitchBodyWithoutDefault_) SwitchBodyWithoutDefault:S1 CASE NUMCONST:N2 COLON StatementList:S3 {: RESULT=new SwitchBodyWithoutDefault_(S1, N2, S3); RESULT.setLine(S1left); :}
							| (NoSwitchBodyWithoutDefault_) {: RESULT=new NoSwitchBodyWithoutDefault_(); :} /* epsilon */
							;

Assignop ::= (Assignop) ASSIGN {: RESULT=new Assignop(); :};


Relop ::= (Eqop1) EQUAL {: RESULT=new Eqop1(); :} 
		| (Difop1) DIF {: RESULT=new Difop1(); :}
		| (Ltop1) LT {: RESULT=new Ltop1(); :}
		| (Leop1) LE {: RESULT=new Leop1(); :}
		| (Gtop1) GT {: RESULT=new Gtop1(); :}
		| (Geop1) GE {: RESULT=new Geop1(); :}
		;

Addop ::= (Plusop1) PLUS {: RESULT=new Plusop1(); :}
		| (Minusop1) MINUS {: RESULT=new Minusop1(); :}
		;

Mulop ::= (Mulop1) MUL {: RESULT=new Mulop1(); :}
		| (Divop1) DIV {: RESULT=new Divop1(); :}
		| (Modop1) MOD {: RESULT=new Modop1(); :}
		;



 			